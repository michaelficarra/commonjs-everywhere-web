// Generated by CoffeeScript 2.0.0-beta5
void function () {
  var app, buildPath, cachePath, cjse, escodegen, esmangle, express, fs, mktemp, npm, path, port, rimraf, url;
  fs = require('fs');
  path = require('path');
  url = require('url');
  cjse = require('commonjs-everywhere');
  escodegen = require('escodegen');
  esmangle = require('esmangle');
  express = require('express');
  mktemp = require('mktemp');
  npm = require('npm');
  rimraf = require('rimraf');
  cachePath = path.resolve('cache');
  buildPath = path.resolve('build');
  if (!fs.existsSync(cachePath))
    fs.mkdirSync(cachePath);
  if (!fs.existsSync(buildPath))
    fs.mkdirSync(buildPath);
  app = express();
  app.get('/', function (req, res) {
    return res.sendfile('index.html');
  });
  app.get(/^\/bundle\/([^@]+)(?:@(.+))?$/, function (req, res) {
    var pkg, version;
    console.log('' + req.ip + ': GET ' + req.originalUrl);
    req.socket.setTimeout(12e4);
    pkg = req.params[0];
    version = req.params[1] || 'latest';
    return npm.load({ loglevel: 'warn' }, function () {
      return npm.commands.view(['' + pkg + '@' + version], true, function (err, viewResult) {
        var cacheFile, cacheFileName, entry, registryEntry, tempBuildDir, v;
        if (err) {
          res.send(404, err.toString());
          res.end();
          return;
        }
        for (v in viewResult) {
          if (!isOwn$(viewResult, v))
            continue;
          entry = viewResult[v];
          registryEntry = entry;
        }
        if (version === 'latest')
          version = registryEntry.version;
        cacheFileName = '' + pkg + '@' + version + '-' + registryEntry.dist.shasum + '.js';
        cacheFile = path.join(cachePath, cacheFileName);
        if (fs.existsSync(cacheFile)) {
          console.log('Serving cached bundle /' + path.relative('.', cacheFileName));
          res.type('javascript');
          res.attachment(cacheFileName);
          res.send(200, fs.readFileSync(cacheFile));
          return;
        }
        tempBuildDir = mktemp.createDirSync(path.join(buildPath, '' + pkg + '@' + version + '-XXXXXX'));
        fs.writeFileSync(path.join(tempBuildDir, 'package.json'), '{"name": "name"}');
        console.log('Building bundle for ' + pkg + '@' + version + ' in /' + path.relative('.', tempBuildDir));
        npm.prefix = tempBuildDir;
        return npm.commands.install([registryEntry.dist.tarball], function (err, installOutput) {
          var bundle, entryFile, entryFileStats, js, outputFile, pkgSlug, root;
          try {
            if (err)
              throw err;
            root = path.normalize(path.join(tempBuildDir, 'node_modules', pkg));
            entryFile = path.join(root, registryEntry.main || 'index.js');
            entryFileStats = function () {
              var e;
              try {
                return fs.statSync(entryFile);
              } catch (e$) {
                e = e$;
                entryFile = '' + entryFile + '.js';
                return fs.statSync(entryFile);
              }
            }.call(this);
            if (entryFileStats.isDirectory())
              entryFile = path.join(entryFile, 'index.js');
            outputFile = path.normalize(path.join(tempBuildDir, 'bundle.js'));
            pkgSlug = pkg.replace(/^[^$_a-z]/i, '_').replace(/[^a-z0-9$_]/gi, '_');
            bundle = cjse.cjsify(entryFile, root, {
              'export': pkgSlug,
              ignoreMissing: true
            });
            bundle = esmangle.mangle(esmangle.optimize(bundle), { destructive: true });
            js = escodegen.generate(bundle, { format: escodegen.FORMAT_MINIFY });
            fs.writeFileSync(outputFile, js);
            fs.renameSync(outputFile, cacheFile);
            rimraf.sync(tempBuildDir);
            console.log('Created new bundle /' + path.relative('.', cacheFile));
            res.type('javascript');
            res.attachment(cacheFileName);
            return res.send(200, js);
          } catch (e$) {
            err = e$;
            console.dir(err);
            res.send(500, err.toString());
            return res.end();
          } finally {
            return rimraf.sync(tempBuildDir);
          }
        });
      });
    });
  });
  port = process.env.PORT || 3e3;
  app.listen(port);
  console.log('Listening on port ' + port);
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
}.call(this);
