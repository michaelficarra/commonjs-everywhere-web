// Generated by CoffeeScript 2.0.0-beta5
void function () {
  var cjse, escodegen, escodegenFormat, esmangle, fs, mktemp, npm, path, pkg, rimraf, url, version;
  fs = require('fs');
  path = require('path');
  url = require('url');
  cjse = require('commonjs-everywhere');
  escodegen = require('escodegen');
  esmangle = require('esmangle');
  mktemp = require('mktemp');
  npm = require('npm');
  rimraf = require('rimraf');
  pkg = 'escodegen';
  version = 'latest';
  escodegenFormat = {
    indent: {
      style: '',
      base: 0
    },
    renumber: true,
    hexadecimal: true,
    quotes: 'auto',
    escapeless: true,
    compact: true,
    parentheses: false,
    semicolons: false
  };
  npm.load({}, function () {
    return npm.commands.info(['' + pkg + '@' + version], function (err, infoResult) {
      var cacheFile, entry, registryEntry, tempBuildDir, v;
      if (err)
        throw err;
      for (v in infoResult) {
        if (!isOwn$(infoResult, v))
          continue;
        entry = infoResult[v];
        registryEntry = entry;
      }
      if (version === 'latest')
        version = registryEntry.version;
      cacheFile = path.resolve(path.join('cache', '' + pkg + '@' + version + '-' + registryEntry.dist.shasum + '.js'));
      if (fs.existsSync(cacheFile)) {
        console.dir(fs.readFileSync(cacheFile));
        return;
      }
      tempBuildDir = mktemp.createDirSync(path.resolve(path.join('build', '' + pkg + '@' + version + '--XXXXXX')));
      fs.writeFileSync(path.join(tempBuildDir, 'package.json'), '{"name": "name"}');
      npm.prefix = tempBuildDir;
      return npm.commands.install([registryEntry.dist.tarball], function (err, installOutput) {
        var bundle, entryFile, js, outputFile, pkgSlug, root;
        if (err) {
          rimraf.sync(tempBuildDir);
          throw err;
        }
        root = path.normalize(path.join(tempBuildDir, 'node_modules', pkg));
        entryFile = path.join(root, registryEntry.main || 'index.js');
        outputFile = path.normalize(path.join(tempBuildDir, 'bundle.js'));
        pkgSlug = pkg.replace(/^[^$_a-z]/i, '_').replace(/[^a-z0-9$_]/gi, '_');
        bundle = cjse.cjsify(entryFile, root, {
          'export': pkgSlug,
          ignoreMissing: true
        });
        bundle = esmangle.mangle(esmangle.optimize(bundle), { destructive: true });
        js = escodegen.generate(bundle, { format: escodegenFormat });
        fs.writeFileSync(outputFile, js);
        fs.renameSync(outputFile, cacheFile);
        rimraf.sync(tempBuildDir);
        return console.dir(js);
      });
    });
  });
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
}.call(this);
